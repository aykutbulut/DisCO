#ifndef DcoConGenerator_hpp_
#define DcoConGenerator_hpp_

#include "Dco.hpp"
#include <string>
#include <BcpsObjectPool.h>

/*!
   DcoConGenerator is an Abstract Base Class (ABC) for generating constraints.
   It provides an interface for constraint generation.
*/

class DcoModel;

class DcoConGenerator {
  /// Name of generator.
  std::string name_;
  /// The client model.
  DcoModel * model_;

  ///@name Constraint Generation Control
  //@{
  /// Constraint generation strategy.
  DcoCutStrategy strategy_;
  /// The frequency of calls to the cut generator.
  int frequency_;
  //@}

  ///@name Constraint Generator Statistics
  //@{
  /// Number of constraints generated by this generator.
  int numConsGenerated_;
  /// Number of constraints that are actually used out of the generated.
  int numConsUsed_;
  /// CPU/User time this generator consumed.
  double time_;
  /// Number of times this generator is called.
  int calls_;
  /// Number of times this generator is called and did not yield any cuts.
  int noConsCalls_;
  //@}

public:
  ///@name Constructors and Destructor
  //@{
  /// Constructor with usefull inputs.
  DcoConGenerator(DcoModel * model,
                  char const * name = NULL,
                  DcoCutStrategy strategy = DcoCutStrategyAuto,
                  int frequency = 1);
  /// Copy constructor.
  DcoConGenerator(DcoConGenerator const & other);
  /// Copy assignment operator.
  DcoConGenerator & operator=(DcoConGenerator const & rhs);
  /// Destructor.
  virtual ~DcoConGenerator();
  //@}

  ///@name Constraint generator functions
  //@{
  /// Generate constraints and add them to the pool.
  virtual bool generateConstraints(BcpsConstraintPool & conPool) = 0;
  //@}

  /// Querry functions.
  //@{
  /// Get a pointer to the model.
  DcoModel * model() const { return model_; }
  /// Get the name of this generator.
  std::string name() const { return name_; }
  /// Get the constraint generation strategy.
  DcoCutStrategy strategy() const { return strategy_; }
  /// Get the frequency of calls to this cut generator.
  int frequency() const { return frequency_; }
  /// Get number of constraints generated by this generator.
  int numConsGenerated() const { return numConsGenerated_; }
  /// Get number of constraints that are actually used out of the generated.
  int numConsUsed() const { return numConsUsed_; }
  /// Get CPU/User time this generator consumed.
  double time() const { return time_; }
  /// Get number of times this generator is called.
  int calls() const { return calls_; }
  /// Get number of times this generator is called and did not yield any cuts.
  int noConsCalls() const { return noConsCalls_; }
  //@}

  ///@name Statistics keeping functions
  //@{
  /// Increase the number of generated constraints.
  void addNumConsGenerated(int n) { numConsGenerated_ += n; }
  /// Increase the number of generated and used constraints.
  void addNumConsUsed(int n) { numConsUsed_ += n; }
  /// Increase Cpu time used.
  void addTime(double t) { time_ += t; }
  /// Increase the number of calls.
  void addCalls(int n=1) { calls_ += n; }
  /// Increase the number of calls and no constraints generated.
  void addNoConsCalls(int n=1) { noConsCalls_ += n; }
  //@}

private:
  /// Disable default constructor.
  DcoConGenerator();

};

#endif
